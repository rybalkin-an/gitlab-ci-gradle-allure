stages:
  - build
  - test
  - history_copy # Копирование результата тестов из предыдущего запуска тестов
  - reports # Генерация отчета
  - deploy # Публикация отчета на gitlab pages

image: gradle:alpine

variables:
  GRADLE_OPTS: "-Dorg.gradle.daemon=false"

before_script:
  - GRADLE_USER_HOME="$(pwd)/.gradle"
  - export GRADLE_USER_HOME

build:
  stage: build
  script: gradle --build-cache assemble
  cache:
    key: "$CI_COMMIT_REF_NAME"
    policy: push
    paths:
      - build
      - .gradle

test:
  stage: test
  script: gradle test
  allow_failure: true
  cache:
    key: "$CI_COMMIT_REF_NAME"
    policy: pull
    paths:
      - build
      - .gradle
  artifacts:
    when: always
    expire_in: 24 hours
    paths:
      - ./build/allure-results
  

history_job:
  stage: history_copy

  image: storytel/alpine-bash-curl

  script:
    - 'curl --location --output artifacts.zip "https://gitlab.com/rybalkin-an/api/v4/projects/learning-ci/jobs/artifacts/master/download?job=pages&job_token=$CI_JOB_TOKEN"'  # С помощью api гитлаба скачиваем файлы из job, который будет указан ниже. Обратите внимание на текст на русском в ссылке. Очень важно указать вместо текста и скобок номер вашего репозиториия
    - apk add unzip # Образ, используемый в этом шаге по умолчанию не имеет утилиты unzip, по этой причине мы добавляем её в контейнер 
    - unzip artifacts.zip # Распаковываем файлы
    - chmod -R 777 public # Даем права любые манипуляции с содержимым
    - cp -r ./public/history ./build/allure-results # Копируем историю в папку с результатами теста

  allow_failure: true # Так как при первом запуске пайплайна истории нет, это позволит нам избежать падения пайплайна. В дальнейшем эту строчку можно спокойно удалить.

  artifacts: 
    paths:
      - ./build/allure-results # Сохраняем данные
    expire_in: 1 day
  rules:
    - when: always # Сохранять всегда

allure_job: # Название job
  stage: reports # Третий stage, который будет выполнен

  image: frankescobar/allure-docker-service # Указываем раннеру использовать образ с allure. В нем мы будем генерировать отчет.

  script:
     - allure generate -c ./build/allure-results -o ./allure-report # Генерируем отчет из ./build/allure-results внутрь папки ./allure-report

  artifacts:
    paths:
      - ./build/allure-results # Примонтируем две этих директории для получения результатов тестирования и генерации отчетов соответственно
      - ./allure-report
    expire_in: 1 day
  rules:
    - when: always  

pages: # Названием этой job говорим гитлабу, чтобы захостил результат у себя в pages

  stage: deploy # Четвертый stage, который будет выполнен

  script:
    - mkdir public # Создаем папку public. По умолчанию гитлаб хостит в gitlab pages только из папки public
    - mv ./allure-report/* public # Перемещаем в папку public сгенерированный отчет.

  artifacts:
    paths:
      - public
  rules:
    - when: always      