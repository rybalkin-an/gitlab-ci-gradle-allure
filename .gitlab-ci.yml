stages:
  - build
  - test
  - history_copy # Копирование результата тестов из предыдущего запуска тестов
  - reports # Генерация отчета
  - deploy # Публикация отчета на gitlab pages

image: gradle:alpine

variables:
  GRADLE_OPTS: "-Dorg.gradle.daemon=false"

before_script:
  - GRADLE_USER_HOME="$(pwd)/.gradle"
  - export GRADLE_USER_HOME

build:
  stage: build
  script: gradle --build-cache assemble
  cache:
    key: "$CI_COMMIT_REF_NAME"
    policy: push
    paths:
      - build
      - .gradle

test:
  stage: test
  script: gradle clean test
  allow_failure: true
  cache:
    key: "$CI_COMMIT_REF_NAME"
    policy: pull
    paths:
      - build
      - .gradle
  artifacts:
    when: always
    expire_in: 24 hours
    paths:
      - ./build/allure-results

report:
  stage: reports

  image: frankescobar/allure-docker-service # Указываем раннеру использовать образ с allure. В нем мы будем генерировать отчет.

  script:
     - allure generate -c ./build/allure-results -o ./build/allure-report # Генерируем отчет из ./build/allure-results внутрь папки ./allure-report

  artifacts:
    paths:
      - ./build/allure-results # Примонтируем две этих директории для получения результатов тестирования и генерации отчетов соответственно
      - ./build/allure-report
    expire_in: 1 day
  rules:
    - when: always  

pages:

  stage: deploy

  script:
    - mkdir public # Создаем папку public. По умолчанию гитлаб хостит в gitlab pages только из папки public
    - mv ./build/allure-report/* public # Перемещаем в папку public сгенерированный отчет.

  artifacts:
    paths:
      - public
  rules:
    - when: always      